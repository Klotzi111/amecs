plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

ext {
	jdk_version = 8
	
	klotzi111_localDeps = "true".equals(System.getenv("klotzi111_localDeps"))
}

sourceCompatibility = jdk_version
targetCompatibility = jdk_version

archivesBaseName = project.archives_base_name
version = "$mod_version+mc$minecraft_version".toString()
group = project.maven_group

sourceSets {
	testmod {
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

repositories {
	mavenLocal()
	maven {
		name "Siphalor's Maven"
		url "https://maven.siphalor.de"
	}
	maven {
		url "https://jitpack.io"
	}
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// FabricMultiVersionHelper
	include(modApi(klotzi111_localDeps ? "de.klotzi111:FabricMultiVersionHelper:1+" : "com.github.Klotzi111:FabricMultiVersionHelper:main-SNAPSHOT"))
	
	// Amecs API
	def amecs_api = modApi(klotzi111_localDeps ? "de.siphalor:amecsapi-${project.target_minecraft_major_version}:1+" : "com.github.Klotzi111:amecs-api:main-SNAPSHOT") {
		exclude(group: "*")
	}
	include(amecs_api)
	
	// NMUK
	modCompileOnly(klotzi111_localDeps ? "de.siphalor:nmuk-${project.target_minecraft_major_version}:1+" : "com.github.Klotzi111:nmuk:main-SNAPSHOT") {
		exclude(group: "*")
	}

	testmodRuntimeOnly("com.github.astei:lazydfu:master-SNAPSHOT")

	// we need those old api versions because newer versions require java 16 and that is not available on older minecraft versions
	// these old fabric apis are required because we want to support down to minecraft 1.14
	def fabric_deps = [
			"fabric-api-base"		   : "0.1.2+de26dc4942",
			"fabric-key-binding-api-v1": "1.0.2+4ea4772942",
			"fabric-resource-loader-v0": "0.1.5+4ea4772942"
	]
	for (dep in fabric_deps.entrySet()) {
		include(modApi("net.fabricmc.fabric-api:" + dep.getKey() + ":" + dep.getValue()))
	}

	testmodImplementation sourceSets.main.output
}

processResources {
	inputs.property "version", version

	afterEvaluate {
		from(sourceSets.main.resources.srcDirs) {
			include "fabric.mod.json"
			expand "version": version
			duplicatesStrategy DuplicatesStrategy.INCLUDE
		}
	}
}

tasks.withType(JavaCompile) {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	options.encoding = "UTF-8"
	options.release = jdk_version
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("sources")
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = "${project.archives_base_name}-${project.target_minecraft_major_version}".toString()

			from components.java
			java.withSourcesJar()
		}
	}
	
	repositories {
		if (project.hasProperty("siphalorMavenUser")) {
			maven {
				name = "Siphalor"
				url = "https://maven.siphalor.de/upload.php"
				credentials {
					username = siphalorMavenUser
					password = siphalorMavenPassword
				}
			}
		}
	}
}
